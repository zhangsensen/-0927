#!/usr/bin/env python3
"""
ÈáèÂåñ‰∫§ÊòìÁ≥ªÁªü‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•ËÑöÊú¨
‰ΩøÁî® pyscn ËøõË°åÊ∑±Â∫¶‰ª£Á†ÅË¥®ÈáèÂàÜÊûê
"""

import argparse
import json
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional


class QuantQualityChecker:
    """ÈáèÂåñ‰∫§ÊòìÁ≥ªÁªü‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•Âô®"""

    def __init__(self, target_path: str = "factor_system/"):
        self.target_path = target_path
        self.project_root = Path.cwd()
        self.reports_dir = self.project_root / "reports"
        self.reports_dir.mkdir(exist_ok=True)

    def run_quality_check(self, format_type: str = "text") -> Dict[str, Any]:
        """ËøêË°å‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•"""
        print(f"üîç ÂºÄÂßãÂàÜÊûê {self.target_path} ÁöÑ‰ª£Á†ÅË¥®Èáè...")

        cmd = ["pyscn", "analyze", self.target_path, f"--{format_type}"]

        try:
            result = subprocess.run(
                cmd, capture_output=True, text=True, cwd=self.project_root
            )

            if result.returncode == 0:
                if format_type == "json":
                    data = json.loads(result.stdout)
                    return self._analyze_json_results(data)
                else:
                    return self._analyze_text_results(result.stdout)
            else:
                print(f"‚ùå ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•Â§±Ë¥•:")
                print(result.stderr)
                return {"success": False, "errors": result.stderr}

        except Exception as e:
            print(f"‚ùå ÊâßË°åË¥®ÈáèÊ£ÄÊü•Êó∂Âá∫Èîô: {e}")
            return {"success": False, "errors": str(e)}

    def _analyze_json_results(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """ÂàÜÊûê JSON Ê†ºÂºèÁöÑÁªìÊûú"""
        results = {
            "success": True,
            "timestamp": datetime.now().isoformat(),
            "summary": {},
            "issues": {
                "complexity": [],
                "dead_code": [],
                "clones": [],
                "architecture": [],
            },
        }

        # Â§çÊùÇÂ∫¶ÂàÜÊûê
        if "complexity" in data:
            complexity_data = data["complexity"]
            results["summary"]["complexity"] = {
                "total_functions": len(complexity_data.get("functions", [])),
                "high_risk": len(
                    [
                        f
                        for f in complexity_data.get("functions", [])
                        if f.get("complexity", 0) > 10
                    ]
                ),
                "medium_risk": len(
                    [
                        f
                        for f in complexity_data.get("functions", [])
                        if 5 < f.get("complexity", 0) <= 10
                    ]
                ),
            }
            results["issues"]["complexity"] = [
                f
                for f in complexity_data.get("functions", [])
                if f.get("complexity", 0) > 5
            ]

        # ‰ª£Á†ÅÂÖãÈöÜÂàÜÊûê
        if "clones" in data:
            clones_data = data["clones"]
            results["summary"]["clones"] = {
                "total_clones": len(clones_data.get("clones", [])),
                "high_similarity": len(
                    [
                        c
                        for c in clones_data.get("clones", [])
                        if c.get("similarity", 0) > 0.9
                    ]
                ),
            }
            results["issues"]["clones"] = clones_data.get("clones", [])

        # Ê≠ª‰ª£Á†ÅÂàÜÊûê
        if "dead_code" in data:
            dead_code_data = data["dead_code"]
            results["summary"]["dead_code"] = {
                "total_issues": len(dead_code_data.get("issues", [])),
                "critical": len(
                    [
                        i
                        for i in dead_code_data.get("issues", [])
                        if i.get("severity") == "critical"
                    ]
                ),
            }
            results["issues"]["dead_code"] = dead_code_data.get("issues", [])

        return results

    def _analyze_text_results(self, output: str) -> Dict[str, Any]:
        """ÂàÜÊûêÊñáÊú¨Ê†ºÂºèÁöÑÁªìÊûú"""
        lines = output.split("\n")
        results = {
            "success": True,
            "timestamp": datetime.now().isoformat(),
            "summary": {},
            "raw_output": output,
        }

        # ÁÆÄÂçïËß£ÊûêÊñáÊú¨ËæìÂá∫
        complexity_issues = 0
        clone_issues = 0
        dead_code_issues = 0

        for line in lines:
            if "too complex" in line.lower():
                complexity_issues += 1
            elif "clone of" in line.lower():
                clone_issues += 1
            elif "dead code" in line.lower() or "unreachable" in line.lower():
                dead_code_issues += 1

        results["summary"] = {
            "complexity_issues": complexity_issues,
            "clone_issues": clone_issues,
            "dead_code_issues": dead_code_issues,
            "total_issues": complexity_issues + clone_issues + dead_code_issues,
        }

        return results

    def generate_quality_report(
        self, results: Dict[str, Any], output_file: Optional[str] = None
    ) -> str:
        """ÁîüÊàêË¥®ÈáèÊä•Âëä"""
        if not output_file:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = self.reports_dir / f"quality_report_{timestamp}.md"

        report_content = self._create_markdown_report(results)

        with open(output_file, "w", encoding="utf-8") as f:
            f.write(report_content)

        print(f"üìä Ë¥®ÈáèÊä•ÂëäÂ∑≤ÁîüÊàê: {output_file}")
        return str(output_file)

    def _create_markdown_report(self, results: Dict[str, Any]) -> str:
        """ÂàõÂª∫ Markdown Ê†ºÂºèÁöÑÊä•Âëä"""
        report = []
        report.append("# ÈáèÂåñ‰∫§ÊòìÁ≥ªÁªü‰ª£Á†ÅË¥®ÈáèÊä•Âëä\n")
        report.append(f"**ÁîüÊàêÊó∂Èó¥**: {results.get('timestamp', 'N/A')}\n")

        if not results.get("success", False):
            report.append("## ‚ùå Ë¥®ÈáèÊ£ÄÊü•Â§±Ë¥•\n")
            report.append(f"**ÈîôËØØ‰ø°ÊÅØ**: {results.get('errors', 'Unknown error')}\n")
            return "\n".join(report)

        # ÊëòË¶Å‰ø°ÊÅØ
        summary = results.get("summary", {})
        report.append("## üìä Ë¥®ÈáèÊëòË¶Å\n")

        if "complexity" in summary:
            comp = summary["complexity"]
            report.append(f"- **Â§çÊùÇÂ∫¶ÂàÜÊûê**: {comp.get('total_functions', 0)} ‰∏™ÂáΩÊï∞")
            report.append(f"  - È´òÈ£éÈô©ÂáΩÊï∞: {comp.get('high_risk', 0)}")
            report.append(f"  - ‰∏≠È£éÈô©ÂáΩÊï∞: {comp.get('medium_risk', 0)}")

        if "clones" in summary:
            clones = summary["clones"]
            report.append(f"- **‰ª£Á†ÅÂÖãÈöÜ**: {clones.get('total_clones', 0)} ‰∏™ÂÖãÈöÜ")
            report.append(f"  - È´òÁõ∏‰ººÂ∫¶ÂÖãÈöÜ: {clones.get('high_similarity', 0)}")

        if "dead_code" in summary:
            dead = summary["dead_code"]
            report.append(f"- **Ê≠ª‰ª£Á†Å**: {dead.get('total_issues', 0)} ‰∏™ÈóÆÈ¢ò")
            report.append(f"  - ÂÖ≥ÈîÆÈóÆÈ¢ò: {dead.get('critical', 0)}")

        report.append("")

        # ËØ¶ÁªÜÈóÆÈ¢ò
        issues = results.get("issues", {})

        # Â§çÊùÇÂ∫¶ÈóÆÈ¢ò
        if issues.get("complexity"):
            report.append("## üö® Â§çÊùÇÂ∫¶ÈóÆÈ¢ò\n")
            for issue in issues["complexity"]:
                report.append(
                    f"### {issue.get('name', 'Unknown')} (Â§çÊùÇÂ∫¶: {issue.get('complexity', 'N/A')})"
                )
                report.append(
                    f"- **‰ΩçÁΩÆ**: {issue.get('file', 'N/A')}:{issue.get('line', 'N/A')}"
                )
                report.append("")

        # ‰ª£Á†ÅÂÖãÈöÜ
        if issues.get("clones"):
            report.append("## üîÑ ‰ª£Á†ÅÂÖãÈöÜ\n")
            for i, clone in enumerate(issues["clones"][:10], 1):  # Âè™ÊòæÁ§∫Ââç10‰∏™
                similarity = clone.get("similarity", 0)
                report.append(f"### ÂÖãÈöÜ #{i} (Áõ∏‰ººÂ∫¶: {similarity:.1%})")
                fragments = clone.get("fragments", [])
                if len(fragments) >= 2:
                    report.append(
                        f"- **‰ΩçÁΩÆ1**: {fragments[0].get('file', 'N/A')}:{fragments[0].get('start_line', 'N/A')}"
                    )
                    report.append(
                        f"- **‰ΩçÁΩÆ2**: {fragments[1].get('file', 'N/A')}:{fragments[1].get('start_line', 'N/A')}"
                    )
                report.append("")

        # Ê≠ª‰ª£Á†Å
        if issues.get("dead_code"):
            report.append("## üíÄ Ê≠ª‰ª£Á†ÅÈóÆÈ¢ò\n")
            for issue in issues["dead_code"]:
                report.append(f"### {issue.get('severity', 'Unknown').title()} Á∫ßÂà´")
                report.append(
                    f"- **‰ΩçÁΩÆ**: {issue.get('file', 'N/A')}:{issue.get('line', 'N/A')}"
                )
                report.append(f"- **ÊèèËø∞**: {issue.get('message', 'N/A')}")
                report.append("")

        report.append("---\n")
        report.append("*Êä•ÂëäÁî± pyscn ÈáèÂåñ‰∫§ÊòìË¥®ÈáèÊ£ÄÊü•Âô®ÁîüÊàê*\n")

        return "\n".join(report)

    def check_critical_files(self) -> Dict[str, Any]:
        """Ê£ÄÊü•ÂÖ≥ÈîÆÊñá‰ª∂ÁöÑ‰ª£Á†ÅË¥®Èáè"""
        critical_paths = [
            "factor_system/factor_engine/core/engine.py",
            "factor_system/factor_engine/api.py",
            "factor_system/factor_generation/enhanced_factor_calculator.py",
            "factor_system/factor_screening/professional_factor_screener.py",
        ]

        results = {"critical_files": {}, "summary": {"total_files": 0, "passed": 0}}

        for path in critical_paths:
            if Path(path).exists():
                results["summary"]["total_files"] += 1
                file_result = self._run_pyscn_check(path)
                results["critical_files"][path] = file_result

                if file_result.get("success", False):
                    results["summary"]["passed"] += 1

        return results

    def _run_pyscn_check(self, path: str) -> Dict[str, Any]:
        """ËøêË°å pyscn Ê£ÄÊü•Âçï‰∏™Êñá‰ª∂"""
        cmd = ["pyscn", "check", path]

        try:
            result = subprocess.run(
                cmd, capture_output=True, text=True, cwd=self.project_root
            )

            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "errors": result.stderr,
            }

        except Exception as e:
            return {"success": False, "errors": str(e)}


def main():
    """‰∏ªÂáΩÊï∞"""
    parser = argparse.ArgumentParser(description="ÈáèÂåñ‰∫§ÊòìÁ≥ªÁªü‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•")
    parser.add_argument(
        "--target", default="factor_system/", help="ÂàÜÊûêÁõÆÊ†áË∑ØÂæÑ (ÈªòËÆ§: factor_system/)"
    )
    parser.add_argument(
        "--format",
        choices=["text", "json"],
        default="text",
        help="ËæìÂá∫Ê†ºÂºè (ÈªòËÆ§: text)",
    )
    parser.add_argument("--output", help="Êä•ÂëäËæìÂá∫Êñá‰ª∂Ë∑ØÂæÑ")
    parser.add_argument("--critical-only", action="store_true", help="Âè™Ê£ÄÊü•ÂÖ≥ÈîÆÊñá‰ª∂")
    parser.add_argument("--no-report", action="store_true", help="‰∏çÁîüÊàêÊä•ÂëäÊñá‰ª∂")

    args = parser.parse_args()

    checker = QuantQualityChecker(args.target)

    if args.critical_only:
        print("üéØ Ê£ÄÊü•ÂÖ≥ÈîÆÊñá‰ª∂Ë¥®Èáè...")
        results = checker.check_critical_files()

        print(f"\nüìä ÂÖ≥ÈîÆÊñá‰ª∂Ê£ÄÊü•ÁªìÊûú:")
        print(f"ÊÄªÊñá‰ª∂Êï∞: {results['summary']['total_files']}")
        print(f"ÈÄöËøáÊ£ÄÊü•: {results['summary']['passed']}")

        for file_path, file_result in results["critical_files"].items():
            status = "‚úÖ" if file_result.get("success", False) else "‚ùå"
            print(f"{status} {file_path}")
    else:
        # ËøêË°åÂÆåÊï¥Ë¥®ÈáèÊ£ÄÊü•
        results = checker.run_quality_check(args.format)

        if results.get("success", False):
            print("‚úÖ ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•ÂÆåÊàê")

            # ÊòæÁ§∫ÊëòË¶Å
            summary = results.get("summary", {})
            if "total_issues" in summary:
                print(f"üìä ÂèëÁé∞ÈóÆÈ¢òÊÄªÊï∞: {summary['total_issues']}")
                print(f"  - Â§çÊùÇÂ∫¶ÈóÆÈ¢ò: {summary.get('complexity_issues', 0)}")
                print(f"  - ‰ª£Á†ÅÂÖãÈöÜ: {summary.get('clone_issues', 0)}")
                print(f"  - Ê≠ª‰ª£Á†ÅÈóÆÈ¢ò: {summary.get('dead_code_issues', 0)}")
        else:
            print("‚ùå ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•Â§±Ë¥•")
            print(results.get("errors", "Unknown error"))
            sys.exit(1)

        # ÁîüÊàêÊä•Âëä
        if not args.no_report:
            report_file = checker.generate_quality_report(results, args.output)
            print(f"üìÑ ËØ¶ÁªÜÊä•Âëä: {report_file}")


if __name__ == "__main__":
    main()
