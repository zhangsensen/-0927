#!/usr/bin/env python3
"""
Âõ†Â≠êÁîüÊàêÂô® V2 - Âº∫Âà∂‰ΩøÁî®SHARED_CALCULATORSÁ°Æ‰øùËÆ°ÁÆó‰∏ÄËá¥ÊÄß
Ê†∏ÂøÉÂéüÂàô: ÊâÄÊúâÂõ†Â≠êÂøÖÈ°ªÈÄöËøáshared/factor_calculators.pyËÆ°ÁÆó
"""

import logging
from pathlib import Path
from typing import Dict, List, Tuple
import re
from datetime import datetime

import pandas as pd
import numpy as np

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class SharedCalculatorFactorGenerator:
    """‰ΩøÁî®ÂÖ±‰∫´ËÆ°ÁÆóÂô®ÁöÑÂõ†Â≠êÁîüÊàêÂô® - Á°Æ‰øù100%ËÆ°ÁÆó‰∏ÄËá¥ÊÄß"""

    def __init__(self):
        self.output_dir = Path("factor_system/factor_engine/factors")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        logger.info("‚úÖ ÂÖ±‰∫´ËÆ°ÁÆóÂô®Âõ†Â≠êÁîüÊàêÂô®ÂàùÂßãÂåñ")

    def extract_all_factors(self) -> Dict[str, Dict]:
        """‰ªéenhanced_factor_calculatorÊèêÂèñÊâÄÊúâÂõ†Â≠ê"""
        logger.info("üìä ÊèêÂèñÂõ†Â≠ê‰ø°ÊÅØ...")

        from factor_system.factor_generation.enhanced_factor_calculator import (
            EnhancedFactorCalculator, IndicatorConfig, TimeFrame
        )

        # ÂàõÂª∫ÊµãËØïÊï∞ÊçÆ
        dates = pd.date_range('2025-01-01', periods=100, freq='5min')
        test_data = pd.DataFrame({
            'open': np.random.uniform(100, 200, 100),
            'high': np.random.uniform(100, 200, 100),
            'low': np.random.uniform(100, 200, 100),
            'close': np.random.uniform(100, 200, 100),
            'volume': np.random.uniform(1000, 10000, 100),
        }, index=dates)

        # ËÆ°ÁÆóÊâÄÊúâÂõ†Â≠ê
        calculator = EnhancedFactorCalculator(IndicatorConfig(enable_all_periods=True))
        factors_df = calculator.calculate_comprehensive_factors(test_data, TimeFrame.MIN_5)

        if factors_df is None:
            raise RuntimeError("‚ùå Êó†Ê≥ïËÆ°ÁÆóÂõ†Â≠ê")

        factor_info = {}
        for factor_name in factors_df.columns:
            info = self._analyze_factor(factor_name)
            factor_info[factor_name] = info

        logger.info(f"‚úÖ ÊèêÂèñ‰∫Ü {len(factor_info)} ‰∏™Âõ†Â≠ê")
        return factor_info

    def _analyze_factor(self, factor_name: str) -> Dict:
        """ÂàÜÊûêÂõ†Â≠êÂπ∂ÁîüÊàê‰ΩøÁî®SHARED_CALCULATORSÁöÑ‰ª£Á†Å"""
        return {
            'name': factor_name,
            'category': self._determine_category(factor_name),
            'parameters': self._extract_parameters(factor_name),
            'description': self._generate_description(factor_name),
            'code_template': self._generate_shared_calc_code(factor_name)
        }

    def _determine_category(self, factor_name: str) -> str:
        """Á°ÆÂÆöÂõ†Â≠êÁ±ªÂà´"""
        name_upper = factor_name.upper()

        if any(p in name_upper for p in ['MA', 'EMA', 'SMA', 'WMA', 'DEMA', 'TEMA', 'BB_', 'BOLB']):
            return 'overlap'
        elif any(p in name_upper for p in ['OBV', 'VOLUME', 'VWAP']):
            return 'volume'
        elif any(p in name_upper for p in ['MOMENTUM', 'POSITION', 'TREND', 'OHLC', 'RAND', 'RPROB', 'ST', 'FIX', 'FMEAN', 'FMIN', 'FMAX', 'FSTD', 'LEX', 'MEANLB']):
            return 'statistic'
        else:
            return 'technical'

    def _extract_parameters(self, factor_name: str) -> Dict:
        """ÊèêÂèñÂõ†Â≠êÂèÇÊï∞"""
        params = {}
        numbers = re.findall(r'(\d+)', factor_name)
        
        if not numbers:
            return params

        name_upper = factor_name.upper()
        
        if 'MACD' in name_upper and len(numbers) >= 3:
            params = {'fastperiod': int(numbers[0]), 'slowperiod': int(numbers[1]), 'signalperiod': int(numbers[2])}
        elif 'STOCH' in name_upper and len(numbers) >= 2:
            params = {'fastk_period': int(numbers[0]), 'slowk_period': int(numbers[1]), 'slowd_period': int(numbers[1])}
        elif any(ind in name_upper for ind in ['RSI', 'WILLR', 'CCI', 'ATR', 'MSTD', 'ADX', 'MFI', 'MOM', 'ROC', 'TRIX']):
            params = {'timeperiod': int(numbers[0])}
        elif any(ind in name_upper for ind in ['MA', 'EMA', 'SMA', 'WMA']):
            params = {'timeperiod': int(numbers[0])}
        elif 'BB_' in name_upper and len(numbers) >= 2:
            params = {'timeperiod': int(numbers[0]), 'nbdevup': float(numbers[1])/10.0, 'nbdevdn': float(numbers[1])/10.0}
        elif any(ind in name_upper for ind in ['MOMENTUM', 'POSITION', 'TREND']):
            params = {'period': int(numbers[0])}
        elif any(ind in name_upper for ind in ['FIXLB', 'LEXLB', 'MEANLB', 'TRENDLB']):
            params = {'lookback': int(numbers[0])}
        elif any(ind in name_upper for ind in ['FMEAN', 'FMIN', 'FMAX', 'FSTD']):
            params = {'window': int(numbers[0])}

        return params

    def _generate_description(self, factor_name: str) -> str:
        """ÁîüÊàêÂõ†Â≠êÊèèËø∞"""
        descriptions = {
            'RSI': 'Áõ∏ÂØπÂº∫Âº±ÊåáÊï∞', 'MACD': 'ÁßªÂä®Âπ≥ÂùáÊî∂ÊïõÊï£Â∫¶', 'STOCH': 'ÈöèÊú∫ÊåáÊ†á',
            'WILLR': 'Â®ÅÂªâÊåáÊ†á', 'CCI': 'ÂïÜÂìÅÈÄöÈÅìÊåáÊï∞', 'ATR': 'Âπ≥ÂùáÁúüÂÆûËåÉÂõ¥',
            'ADX': 'Âπ≥ÂùáË∂ãÂêëÊåáÊï∞', 'BBANDS': 'Â∏ÉÊûóÂ∏¶', 'OBV': 'ËÉΩÈáèÊΩÆ',
            'MA': 'ÁßªÂä®Âπ≥ÂùáÁ∫ø', 'EMA': 'ÊåáÊï∞ÁßªÂä®Âπ≥Âùá', 'SMA': 'ÁÆÄÂçïÁßªÂä®Âπ≥Âùá',
            'MSTD': 'ÁßªÂä®Ê†áÂáÜÂ∑Æ', 'MOMENTUM': 'Âä®ÈáèÊåáÊ†á', 'POSITION': '‰ª∑Ê†º‰ΩçÁΩÆ',
            'TREND': 'Ë∂ãÂäøÂº∫Â∫¶', 'VWAP': 'Êàê‰∫§ÈáèÂä†ÊùÉÂπ≥Âùá‰ª∑'
        }
        
        for key, desc in descriptions.items():
            if key in factor_name.upper():
                return f"{desc} - {factor_name}"
        
        return f"ÊäÄÊúØÊåáÊ†á - {factor_name}"

    def _generate_shared_calc_code(self, factor_name: str) -> str:
        """ÁîüÊàê‰ΩøÁî®SHARED_CALCULATORSÁöÑ‰ª£Á†Å"""
        category = self._determine_category(factor_name)
        params = self._extract_parameters(factor_name)
        class_name = self._sanitize_class_name(factor_name)
        
        template = f'''class {class_name}(BaseFactor):
    """
    {self._generate_description(factor_name)}
    
    Á±ªÂà´: {category}
    ÂèÇÊï∞: {params}
    """
    
    factor_id = "{factor_name}"
    category = "{category}"
    
    def __init__(self, **kwargs):
        default_params = {params}
        default_params.update(kwargs)
        super().__init__(**default_params)
    
    def calculate(self, data: pd.DataFrame) -> pd.Series:
        """ËÆ°ÁÆóÂõ†Â≠êÂÄº - ‰ΩøÁî®SHARED_CALCULATORSÁ°Æ‰øù‰∏ÄËá¥ÊÄß"""
        try:
'''

        # Ê†πÊçÆÂõ†Â≠êÁ±ªÂûãÁîüÊàêË∞ÉÁî®SHARED_CALCULATORSÁöÑ‰ª£Á†Å
        name_upper = factor_name.upper()
        
        if 'RSI' in name_upper and not name_upper.startswith('TA_STOCHRSI'):
            period = params.get('timeperiod', 14)
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            return SHARED_CALCULATORS.calculate_rsi(
                data["close"], period={period}
            ).rename("{factor_name}")
'''
        elif 'WILLR' in name_upper:
            period = params.get('timeperiod', 14)
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            return SHARED_CALCULATORS.calculate_willr(
                data["high"], data["low"], data["close"], timeperiod={period}
            ).rename("{factor_name}")
'''
        elif 'MACD' in name_upper:
            fast = params.get('fastperiod', 12)
            slow = params.get('slowperiod', 26)
            signal = params.get('signalperiod', 9)
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            result = SHARED_CALCULATORS.calculate_macd(
                data["close"], fastperiod={fast}, slowperiod={slow}, signalperiod={signal}
            )
            return result['macd'].rename("{factor_name}")
'''
        elif 'STOCH' in name_upper and not name_upper.startswith('TA_'):
            fastk = params.get('fastk_period', 14)
            slowk = params.get('slowk_period', 3)
            slowd = params.get('slowd_period', 3)
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            result = SHARED_CALCULATORS.calculate_stoch(
                data["high"], data["low"], data["close"],
                fastk_period={fastk}, slowk_period={slowk}, slowd_period={slowd}
            )
            return result['slowk'].rename("{factor_name}")
'''
        elif 'ATR' in name_upper:
            period = params.get('timeperiod', 14)
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            return SHARED_CALCULATORS.calculate_atr(
                data["high"], data["low"], data["close"], timeperiod={period}
            ).rename("{factor_name}")
'''
        elif 'ADX' in name_upper:
            period = params.get('timeperiod', 14)
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            return SHARED_CALCULATORS.calculate_adx(
                data["high"], data["low"], data["close"], period={period}
            ).rename("{factor_name}")
'''
        elif 'BBANDS' in name_upper or 'BB_' in name_upper:
            period = params.get('timeperiod', 20)
            nbdevup = params.get('nbdevup', 2.0)
            nbdevdn = params.get('nbdevdn', 2.0)
            # Âà§Êñ≠ËøîÂõûÂì™‰∏™ÂàÜÈáè
            if 'Upper' in factor_name:
                component = 'upper'
            elif 'Lower' in factor_name:
                component = 'lower'
            else:
                component = 'middle'
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            result = SHARED_CALCULATORS.calculate_bbands(
                data["close"], period={period}, nbdevup={nbdevup}, nbdevdn={nbdevdn}
            )
            return result['{component}'].rename("{factor_name}")
'''
        elif 'ROC' in name_upper and not any(x in name_upper for x in ['ROCP', 'ROCR']):
            period = params.get('timeperiod', 14)
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            return SHARED_CALCULATORS.calculate_roc(
                data["close"], period={period}
            ).rename("{factor_name}")
'''
        elif 'PLUS_DI' in name_upper or 'PLUSDI' in name_upper:
            period = params.get('timeperiod', 14)
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            return SHARED_CALCULATORS.calculate_plus_di(
                data["high"], data["low"], data["close"], period={period}
            ).rename("{factor_name}")
'''
        elif 'TRANGE' in name_upper:
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            return SHARED_CALCULATORS.calculate_trange(
                data["high"], data["low"], data["close"]
            ).rename("{factor_name}")
'''
        elif name_upper.startswith('TA_CDL'):
            # KÁ∫øÂΩ¢ÊÄÅËØÜÂà´
            pattern_name = factor_name[3:]  # ÁßªÈô§TA_ÂâçÁºÄ
            template += f'''            from factor_system.shared.factor_calculators import SHARED_CALCULATORS
            return SHARED_CALCULATORS.calculate_candlestick_pattern(
                data["open"], data["high"], data["low"], data["close"],
                pattern_name="{pattern_name}"
            ).rename("{factor_name}")
'''
        else:
            # ‰ΩøÁî®VectorBTÊàñPandasÂÆûÁé∞ÁöÑÂõ†Â≠ê
            template += self._generate_vectorbt_code(factor_name, params)

        template += '''
        except Exception as e:
            logger.error(f"ËÆ°ÁÆó{self.factor_id}Â§±Ë¥•: {e}")
            return pd.Series(np.nan, index=data.index, name=self.factor_id)
'''
        
        return template

    def _generate_vectorbt_code(self, factor_name: str, params: Dict) -> str:
        """ÁîüÊàêVectorBTÂÆûÁé∞ÁöÑ‰ª£Á†ÅÔºàÂΩìSHARED_CALCULATORS‰∏çÊîØÊåÅÊó∂Ôºâ"""
        name_upper = factor_name.upper()
        
        if 'CCI' in name_upper:
            period = params.get('timeperiod', 14)
            return f'''            # CCI - ÂïÜÂìÅÈÄöÈÅìÊåáÊï∞
            tp = (data["high"] + data["low"] + data["close"]) / 3
            sma_tp = tp.rolling(window={period}).mean()
            mad = np.abs(tp - sma_tp).rolling(window={period}).mean()
            result = (tp - sma_tp) / (0.015 * mad + 1e-8)
            return result.rename("{factor_name}")
'''
        elif any(x in name_upper for x in ['MA', 'EMA', 'SMA', 'WMA']) and 'MACD' not in name_upper:
            period = params.get('timeperiod', 20)
            if 'EMA' in name_upper:
                return f'''            # EMA - ÊåáÊï∞ÁßªÂä®Âπ≥Âùá
            result = data["close"].ewm(span={period}, adjust=False).mean()
            return result.rename("{factor_name}")
'''
            else:
                return f'''            # SMA - ÁÆÄÂçïÁßªÂä®Âπ≥Âùá
            result = data["close"].rolling(window={period}).mean()
            return result.rename("{factor_name}")
'''
        elif 'MSTD' in name_upper:
            period = params.get('timeperiod', 20)
            return f'''            # MSTD - ÁßªÂä®Ê†áÂáÜÂ∑Æ
            result = data["close"].rolling(window={period}).std()
            return result.rename("{factor_name}")
'''
        elif 'OBV' in name_upper:
            return f'''            # OBV - ËÉΩÈáèÊΩÆ
            obv = (np.sign(data["close"].diff()) * data["volume"]).fillna(0).cumsum()
            return obv.rename("{factor_name}")
'''
        elif 'MOMENTUM' in name_upper:
            period = params.get('period', 10)
            return f'''            # Âä®ÈáèÊåáÊ†á
            result = data["close"] / data["close"].shift({period}) - 1
            return result.rename("{factor_name}")
'''
        elif 'POSITION' in name_upper:
            period = params.get('period', 20)
            return f'''            # ‰ª∑Ê†º‰ΩçÁΩÆÊåáÊ†á
            highest = data["high"].rolling(window={period}).max()
            lowest = data["low"].rolling(window={period}).min()
            result = (data["close"] - lowest) / (highest - lowest + 1e-8)
            return result.rename("{factor_name}")
'''
        elif 'TREND' in name_upper:
            period = params.get('period', 20)
            return f'''            # Ë∂ãÂäøÂº∫Â∫¶ÊåáÊ†á
            mean_price = data["close"].rolling(window={period}).mean()
            std_price = data["close"].rolling(window={period}).std()
            result = (data["close"] - mean_price) / (std_price + 1e-8)
            return result.rename("{factor_name}")
'''
        elif 'VWAP' in name_upper:
            period = params.get('period', 20)
            return f'''            # VWAP - Êàê‰∫§ÈáèÂä†ÊùÉÂπ≥Âùá‰ª∑
            typical_price = (data["high"] + data["low"] + data["close"]) / 3
            vwap = (typical_price * data["volume"]).rolling(window={period}).sum() / (data["volume"].rolling(window={period}).sum() + 1e-8)
            return vwap.rename("{factor_name}")
'''
        else:
            # ÈªòËÆ§ÂÆûÁé∞ - ËøîÂõûÊî∂Áõò‰ª∑‰Ωú‰∏∫Âç†‰ΩçÁ¨¶
            return f'''            # ÈªòËÆ§ÂÆûÁé∞ - ÈúÄË¶ÅÂÆåÂñÑ
            logger.warning(f"Âõ†Â≠ê{factor_name}‰ΩøÁî®ÈªòËÆ§ÂÆûÁé∞")
            return data["close"].rename("{factor_name}")
'''

    def _sanitize_class_name(self, factor_name: str) -> str:
        """Ê∏ÖÁêÜÁ±ªÂêç"""
        clean_name = re.sub(r'[^a-zA-Z0-9_]', '_', factor_name)
        if clean_name[0].isdigit():
            clean_name = f"Factor_{clean_name}"
        return clean_name

    def generate_factor_files(self, factor_info: Dict[str, Dict]) -> List[str]:
        """ÁîüÊàêÊâÄÊúâÂõ†Â≠êÊñá‰ª∂"""
        logger.info("üìù ÁîüÊàêÂõ†Â≠êÊñá‰ª∂...")

        # ÊåâÁ±ªÂà´ÂàÜÁªÑ
        by_category = {}
        for factor_name, info in factor_info.items():
            category = info['category']
            if category not in by_category:
                by_category[category] = []
            by_category[category].append((factor_name, info))

        generated_files = []
        for category, factors in by_category.items():
            file_path = self.output_dir / f"{category}_generated.py"
            content = self._generate_category_file(category, factors)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            generated_files.append(str(file_path))
            logger.info(f"‚úÖ {file_path.name}: {len(factors)}‰∏™Âõ†Â≠ê")

        # ÁîüÊàê__init__.py
        self._generate_init_file(by_category)
        
        return generated_files

    def _generate_category_file(self, category: str, factors: List[Tuple[str, Dict]]) -> str:
        """ÁîüÊàêÁ±ªÂà´Êñá‰ª∂"""
        content = f'''"""
Ëá™Âä®ÁîüÊàêÁöÑ{category}Á±ªÂõ†Â≠ê
‰ΩøÁî®SHARED_CALCULATORSÁ°Æ‰øùËÆ°ÁÆó‰∏ÄËá¥ÊÄß
ÁîüÊàêÊó∂Èó¥: {datetime.now()}
"""

from __future__ import annotations

import logging
import numpy as np
import pandas as pd

from ..core.base_factor import BaseFactor

logger = logging.getLogger(__name__)


'''
        for factor_name, info in factors:
            content += info['code_template']
            content += '\n\n'
        
        return content

    def _generate_init_file(self, by_category: Dict[str, List[Tuple[str, Dict]]]):
        """ÁîüÊàê__init__.py"""
        init_path = self.output_dir / "__init__.py"
        
        content = '''"""
Ëá™Âä®ÁîüÊàêÁöÑÂõ†Â≠êÊ®°Âùó - ‰ΩøÁî®SHARED_CALCULATORSÁ°Æ‰øù‰∏ÄËá¥ÊÄß
"""

# ÂØºÂÖ•ÊâÄÊúâÁîüÊàêÁöÑÂõ†Â≠ê
'''
        for category in by_category.keys():
            content += f'from .{category}_generated import *\n'
        
        # ÁîüÊàêÂõ†Â≠êÂàóË°®
        all_factors = []
        for category, factors in by_category.items():
            for factor_name, info in factors:
                class_name = self._sanitize_class_name(factor_name)
                all_factors.append(class_name)
        
        content += f'''

# ÊâÄÊúâÁîüÊàêÁöÑÂõ†Â≠êÁ±ª
GENERATED_FACTORS = [
'''
        for class_name in all_factors:
            content += f'    {class_name},\n'
        
        content += ''']

# Âõ†Â≠êIDÂà∞Á±ªÁöÑÊò†Â∞Ñ
FACTOR_CLASS_MAP = {
'''
        for category, factors in by_category.items():
            for factor_name, info in factors:
                class_name = self._sanitize_class_name(factor_name)
                content += f'    "{factor_name}": {class_name},\n'
        
        content += '}\n'
        
        with open(init_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info("‚úÖ ÁîüÊàê__init__.py")

    def run(self) -> List[str]:
        """ËøêË°åÁîüÊàêÂô®"""
        logger.info("üöÄ ÂêØÂä®ÂÖ±‰∫´ËÆ°ÁÆóÂô®Âõ†Â≠êÁîüÊàêÂô®...")
        
        factor_info = self.extract_all_factors()
        generated_files = self.generate_factor_files(factor_info)
        
        logger.info(f"‚úÖ ÂÆåÊàê! ÁîüÊàê {len(generated_files)} ‰∏™Êñá‰ª∂Ôºå{len(factor_info)} ‰∏™Âõ†Â≠ê")
        return generated_files


def main():
    """‰∏ªÂáΩÊï∞"""
    generator = SharedCalculatorFactorGenerator()
    files = generator.run()
    
    print("\n" + "="*60)
    print("‚úÖ Âõ†Â≠êÁîüÊàêÂÆåÊàê - ‰ΩøÁî®SHARED_CALCULATORSÁ°Æ‰øù‰∏ÄËá¥ÊÄß")
    print("="*60)
    print(f"\nÁîüÊàêÁöÑÊñá‰ª∂ ({len(files)}‰∏™):")
    for file_path in files:
        print(f"  üìÑ {file_path}")
    print("\nüéØ Ê†∏ÂøÉÊîπËøõ:")
    print("  ‚úì ÊâÄÊúâÂõ†Â≠êÂº∫Âà∂‰ΩøÁî®SHARED_CALCULATORS")
    print("  ‚úì Á°Æ‰øùfactor_engine‰∏éfactor_generationËÆ°ÁÆó100%‰∏ÄËá¥")
    print("  ‚úì Ê∂àÈô§ËÆ°ÁÆóÂÅèÂ∑ÆÔºåÁªü‰∏ÄÁ†îÁ©∂„ÄÅÂõûÊµã„ÄÅÁîü‰∫ßÁéØÂ¢É")
    print("="*60)


if __name__ == "__main__":
    main()
