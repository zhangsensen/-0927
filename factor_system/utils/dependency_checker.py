# -*- coding: utf-8 -*-
\"\"\"依赖检查工具\"\"\"\n\nimport importlib\nimport logging\nimport sys\nfrom typing import Dict, List, Tuple\n\nlogger = logging.getLogger(__name__)\n\n\nclass DependencyChecker:\n    \"\"\"检查依赖是否可用\"\"\"\n\n    REQUIRED_DEPS = [\"pandas\", \"numpy\", \"scipy\", \"vectorbt\", \"talib\", \"sklearn\"]\n\n    OPTIONAL_DEPS = {\n        \"performance\": [\"polars\", \"numba\"],\n        \"visualization\": [\"matplotlib\", \"plotly\", \"seaborn\"],\n        \"web\": [\"dash\"],\n        \"database\": [\"sqlalchemy\", \"redis\"],\n        \"scheduling\": [\"schedule\"],\n    }\n\n    @classmethod\n    def check_dependencies(cls) -> Tuple[List[str], Dict[str, List[str]]]:\n        \"\"\"\n        检查依赖状态\n\n        Returns:\n            Tuple[List[str], Dict[str, List[str]]]: (缺失的必需依赖, 各功能模块的缺失依赖)\n        \"\"\"\n        missing_required = []\n        missing_optional = {}\n\n        # 检查必需依赖\n        for dep in cls.REQUIRED_DEPS:\n            try:\n                # 处理特殊的模块名映射\n                module_name = dep\n                if dep == \"talib\":\n                    module_name = \"talib\"\n                elif dep == \"sklearn\":\n                    module_name = \"sklearn\"\n\n                importlib.import_module(module_name)\n                logger.debug(f\"✅ {dep} 已安装\")\n            except ImportError:\n                missing_required.append(dep)\n                logger.warning(f\"❌ {dep} 未安装\")\n\n        # 检查可选依赖\n        for category, deps in cls.OPTIONAL_DEPS.items():\n            missing = []\n            for dep in deps:\n                try:\n                    importlib.import_module(dep.replace(\"-\", \"_\"))\n                    logger.debug(f\"✅ {dep} ({category}) 已安装\")\n                except ImportError:\n                    missing.append(dep)\n                    logger.debug(f\"⚠️ {dep} ({category}) 未安装\")\n            if missing:\n                missing_optional[category] = missing\n\n        return missing_required, missing_optional\n\n    @classmethod\n    def print_dependency_status(cls):\n        \"\"\"打印依赖状态\"\"\"\n        missing_required, missing_optional = cls.check_dependencies()\n\n        print(\"=== 依赖状态检查 ===\")\n\n        if missing_required:\n            print(f\"❌ 缺失必需依赖: {', '.join(missing_required)}\")\n            print(\"请运行: pip install \" + \" \".join(missing_required))\n        else:\n            print(\"✅ 所有必需依赖已安装\")\n\n        if missing_optional:\n            print(\"\\n⚠️  可选依赖状态:\")\n            for category, deps in missing_optional.items():\n                print(f\"  {category}: 缺失 {', '.join(deps)}\")\n                print(f\"  安装命令: pip install {' '.join(deps)}\")\n        else:\n            print(\"✅ 所有可选依赖已安装\")\n\n    @classmethod\n    def get_installation_commands(cls) -> Dict[str, str]:\n        \"\"\"\n        获取安装命令\n\n        Returns:\n            Dict[str, str]: 各类依赖的安装命令\n        \"\"\"\n        missing_required, missing_optional = cls.check_dependencies()\n\n        commands = {}\n\n        if missing_required:\n            commands[\"required\"] = f\"pip install {' '.join(missing_required)}\"\n\n        for category, deps in missing_optional.items():\n            if deps:\n                commands[category] = f\"pip install {' '.join(deps)}\"\n\n        return commands\n\n    @classmethod\n    def check_version_compatibility(cls) -> Dict[str, str]:\n        \"\"\"\n        检查版本兼容性\n\n        Returns:\n            Dict[str, str]: 模块版本信息\n        \"\"\"\n        version_info = {}\n\n        for dep in cls.REQUIRED_DEPS:\n            try:\n                module = importlib.import_module(dep.replace(\"-\", \"_\"))\n                version = getattr(module, \"__version__\", \"Unknown\")\n                version_info[dep] = version\n            except ImportError:\n                version_info[dep] = \"Not installed\"\n\n        return version_info\n\n    @classmethod\n    def validate_environment(cls) -> bool:\n        \"\"\"\n        验证环境是否满足最低要求\n\n        Returns:\n            bool: 环境是否有效\n        \"\"\"\n        missing_required, _ = cls.check_dependencies()\n\n        if missing_required:\n            logger.error(f\"环境验证失败: 缺失必需依赖 {missing_required}\")\n            return False\n\n        # 检查Python版本\n        if sys.version_info < (3, 8):\n            logger.error(f\"Python版本过低: {sys.version_info}, 需要 >= 3.8\")\n            return False\n\n        logger.info(\"✅ 环境验证通过\")\n        return True