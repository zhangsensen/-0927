# Linus风格Pre-commit配置 - 实用主义优先
# 核心理念：简单、实用、高效，专注于真正重要的问题

repos:
  # 自动代码格式化 - 消除风格争论，统一标准
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
        args: [--line-length=88]

  # 自动导入排序 - 减少merge冲突，提高可读性
  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        args: [--profile, black]

  # 本地实用检查 - 只检查真正重要的问题
  - repo: local
    hooks:
      # 未来函数检查 - 量化交易核心安全防护【必须保留】
      # 防止未来函数泄露，确保回测结果的有效性
      - id: future-functions
        name: 检查未来函数使用
        entry: python factor_system/factor_screening/scripts/check_future_functions.py
        language: system
        files: \.py$
        pass_filenames: true
        # 严格模式：任何未来函数使用都会阻止提交

      # Python语法检查 - 确保代码可以运行
      - id: syntax-check
        name: Python语法检查
        entry: python -m py_compile
        language: system
        files: \.py$
        pass_filenames: true

      # 因子清单验证 - 确保FactorEngine严格遵循官方因子清单【必须保留】
      # 防止FactorEngine添加未授权因子，维护系统合规性
      - id: factor-registry-validation
        name: 验证因子清单合规性
        entry: python factor_system/factor_engine/validate_factor_registry.py
        language: system
        files: ^factor_system/factor_engine/.*\.py$|^factor_system/factor_generation/.*\.py$|^factor_system/FACTOR_REGISTRY\.md$
        pass_filenames: false
        # 严格模式：任何违规都会阻止提交

      # 因子一致性检查 - 确保FactorEngine严格继承factor_generation【必须保留】
      # 防止FactorEngine被随意修改，保持与factor_generation的严格一致性
      - id: factor-consistency
        name: 检查因子一致性
        entry: python -c "import sys; sys.path.append('.'); from factor_system.factor_engine.auto_sync_validator import AutoSyncValidator; validator = AutoSyncValidator(); success = validator.validate_and_sync(); print('❌ FactorEngine与factor_generation不一致，提交被阻止\n请运行修复命令后再提交：\n  cd factor_system/factor_engine\n  python factor_consistency_guard.py create-baseline\n  python factor_consistency_guard.py enforce' if not success else '✅ 因子一致性验证通过'); sys.exit(1 if not success else 0)"
        language: system
        files: ^factor_system/factor_engine/.*\.py$
        pass_filenames: false
        # 严格模式：任何不一致都会阻止提交

# 移除的检查及原因：
# - flake8: 过度关注代码风格，Linus认为"好代码"不需要规则束缚
# - mypy: 类型检查增加复杂性，Python动态特性是优势
# - pandas-vet: 小众工具，维护成本高，实用性有限
# - bandit: 安全检查重要但应在CI/CD中处理，不阻塞本地开发
# - safety-check: 依赖安全检查应该由CI/CD处理，不是本地开发关注点
# - loglint: 日志格式是次要问题，不应阻塞提交

# ⚠️ 核心安全检查（不可移除）：
# ✅ future-functions: 防止未来函数泄露，确保量化策略回测有效性
# ✅ factor-registry-validation: 确保FactorEngine严格遵循官方因子清单，防止未授权因子
# ✅ factor-consistency: 确保FactorEngine严格继承factor_generation，防止不一致修改